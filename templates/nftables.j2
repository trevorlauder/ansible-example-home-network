{{ ansible_managed | comment }}

# =========================================
# Table Definitions
# =========================================

# Create main tables for NAT and filtering
add table inet nat
add table inet filter

# =========================================
# Chain Definitions
# =========================================

# NAT table chains for address translation
add chain inet nat PREROUTING { type nat hook prerouting priority -100; policy accept; }
add chain inet nat POSTROUTING { type nat hook postrouting priority 100; policy accept; }

# Filter table chains for main firewall logic
add chain inet filter INPUT { type filter hook input priority 0; policy drop; }
add chain inet filter FORWARD { type filter hook forward priority 0; policy drop; }
add chain inet filter OUTPUT { type filter hook output priority 0; policy accept; }

# Custom chains for policy drops and logging
add chain inet filter INPUT_LOG_DROP
add chain inet filter FORWARD_LOG_DROP

# Generic counters for tracking rule hits
add counter inet filter forward_antispoof_ipv4_drop
add counter inet filter forward_antispoof_ipv6_drop
add counter inet filter forward_established
add counter inet filter forward_invalid_state_drop
add counter inet filter forward_ipv4_drop
add counter inet filter forward_ipv6_drop
add counter inet filter forward_log_drop
add counter inet filter forward_policy_jump_log_drop
add counter inet filter input_antispoof_ipv4_drop
add counter inet filter input_antispoof_ipv6_drop
add counter inet filter input_established
add counter inet filter input_icmp_rate_limit_ipv4
add counter inet filter input_icmp_rate_limit_ipv6
add counter inet filter input_icmpv6_wan
add counter inet filter input_invalid_state_drop
add counter inet filter input_lo
add counter inet filter input_log_drop
add counter inet filter input_policy_jump_log_drop

# =====================
# PREROUTING
# =====================

# Redirect DNS queries to local gateway for each subnet that requires it
{% for domain, data in subnets.items() | sort %}

# DNS PREROUTING - {{ domain }}
{% if data.dns_prerouting %}
add rule inet nat PREROUTING iifname {{ data.interface }} meta l4proto { tcp, udp } th dport 53 counter dnat ip to {{ data.gateway }}:53
{% endif %}
{% endfor %}

# =========================================
# Sets and Counters
# =========================================

# Sets for grouping addresses to drop in FORWARD chain
add set inet filter IPV4_FORWARD_DROP { type ipv4_addr; flags interval; }
add set inet filter IPV6_FORWARD_DROP { type ipv6_addr; flags interval; }

# Sets for private IPv4 ranges to drop in INPUT and FORWARD chains
add set inet filter private_ipv4 { type ipv4_addr; flags interval; }
add element inet filter private_ipv4 { 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16 }

# Sets for private IPv6 ranges to drop in INPUT and FORWARD chains
add set inet filter private_ipv6 { type ipv6_addr; flags interval; }
add element inet filter private_ipv6 { fc00::/7 }

# =========================================
# NAT: IPv4 Masquerade
# =========================================

# Masquerade all outgoing IPv4 traffic on the WAN interface
add rule inet nat POSTROUTING oifname {{ firewall.wan }} ip version 4 counter masquerade

# =========================================
# INPUT Chain Rules
# =========================================

# Drop invalid connection states
add rule inet filter INPUT ct state invalid counter name input_invalid_state_drop drop comment "Invalid connection state"

# Drop LAN addresses on WAN interface
add rule inet filter INPUT iifname {{ firewall.wan }} ip saddr @private_ipv4 counter name input_antispoof_ipv4_drop drop comment "Antispoof IPv4 on WAN"
{% if firewall.ipv6 %}
add rule inet filter INPUT iifname {{ firewall.wan }} ip6 saddr @private_ipv6 counter name input_antispoof_ipv6_drop drop comment "Antispoof IPv6 on WAN"
{% endif %}

# Rate limit ICMP and ICMPv6 packets
add rule inet filter INPUT ip protocol icmp limit rate 20/second burst 10 packets counter name input_icmp_rate_limit_ipv4 drop comment "ICMP rate limit"
{% if firewall.ipv6 %}
add rule inet filter INPUT meta l4proto icmpv6 limit rate 20/second burst 10 packets counter name input_icmp_rate_limit_ipv6 drop comment "ICMPv6 rate limit"
{% endif %}

# Log and drop packets in INPUT_LOG_DROP chain
add rule inet filter INPUT_LOG_DROP limit rate 10/minute burst 5 packets log prefix "INPUT:DROP: " level notice
add rule inet filter INPUT_LOG_DROP counter name input_log_drop drop

# Accept loopback traffic
add rule inet filter INPUT iifname lo counter name input_lo accept

# Accept established and related connections on INPUT chain
add rule inet filter INPUT ct state related,established counter name input_established accept

{% if firewall.get('ipv6', false) and firewall.get('icmpv6_wan_types', []) | length > 0 %}
# Accept specific ICMPv6 types on WAN interface
add rule inet filter INPUT iifname {{ firewall.wan }} meta l4proto icmpv6 icmpv6 type { {{ firewall.icmpv6_wan_types | join(', ') }} } counter name input_icmpv6_wan accept
{% endif %}

# =========================================
# Per-Subnet INPUT Rules
# =========================================
{% for domain, domain_data in subnets.items() | sort %}

### {{ domain }} ###

# ICMP
add counter inet filter input_icmp_{{ domain|replace('.', '_') }}
add rule inet filter INPUT iifname {{ domain_data.interface }} ip protocol icmp counter name input_icmp_{{ domain|replace('.', '_') }} accept comment "{{ domain }}"
{% if domain_data.ipv6 %}

# ICMPv6
add counter inet filter input_icmpv6_{{ domain|replace('.', '_') }}
add rule inet filter INPUT iifname {{ domain_data.interface }} meta l4proto icmpv6 counter name input_icmpv6_{{ domain|replace('.', '_') }} accept comment "{{ domain }}"
{% endif %}

# DNS requests
add rule inet filter INPUT iifname {{ domain_data.interface }} meta l4proto { tcp, udp } th dport 53 counter accept comment "{{ domain }}"

# DHCP requests
add rule inet filter INPUT iifname {{ domain_data.interface }} udp dport 67 counter accept comment "{{ domain }}"
{% if domain_data.allow_firewall_ssh %}
# SSH access to firewall from this subnet interface

add counter inet filter input_ssh_{{ domain|replace('.', '_') }}_rate_drop
add rule inet filter INPUT iifname {{ domain_data.interface }} tcp dport 22 ct state new limit rate 10/minute burst 4 packets counter name input_ssh_{{ domain|replace('.', '_') }}_rate_drop drop comment "{{ domain }}"

add rule inet filter INPUT iifname {{ domain_data.interface }} tcp dport 22 counter accept comment "{{ domain }}"
{% endif %}
{% endfor %}

# =========================================
# INPUT Policy Chain Jump
# =========================================

# Send packets to INPUT_LOG_DROP
add rule inet filter INPUT counter name input_policy_jump_log_drop jump INPUT_LOG_DROP

# =========================================
# FORWARD Chain Rules
# =========================================

# Drop invalid connection states
add rule inet filter FORWARD ct state invalid counter name forward_invalid_state_drop drop comment "Invalid connection state"

# Drop LAN addresses on WAN interface
add rule inet filter FORWARD iifname {{ firewall.wan }} ip saddr @private_ipv4 counter name forward_antispoof_ipv4_drop drop comment "Antispoof IPv4 on WAN"
{% if firewall.ipv6 %}
add rule inet filter FORWARD iifname {{ firewall.wan }} ip6 saddr @private_ipv6 counter name forward_antispoof_ipv6_drop drop comment "Antispoof IPv6 on WAN"
{% endif %}

# Log and drop packets in FORWARD_LOG_DROP chain
add rule inet filter FORWARD_LOG_DROP limit rate 10/minute burst 5 packets log prefix "FORWARD:DROP: " level notice
add rule inet filter FORWARD_LOG_DROP counter name forward_log_drop drop

# Send specific IPs to FORWARD_LOG_DROP chain
add rule inet filter FORWARD oifname {{ firewall.wan }} ip daddr @IPV4_FORWARD_DROP counter name forward_ipv4_drop jump FORWARD_LOG_DROP comment "Drop to IPv4 blocklist"
{% if firewall.get('ipv6', false) %}
add rule inet filter FORWARD oifname {{ firewall.wan }} ip6 daddr @IPV6_FORWARD_DROP counter name forward_ipv6_drop jump FORWARD_LOG_DROP comment "Drop to IPv6 blocklist"
{% endif %}
{% if firewall.get('ipv4_drop', []) | length > 0 %}
{% for ip in firewall.ipv4_drop | sort %}

# Drop forwarding to WAN for IP {{ ip }}
add rule inet filter FORWARD oifname {{ firewall.wan }} ip daddr {{ ip }} counter jump FORWARD_LOG_DROP comment "{{ ip }}"
{% endfor %}
{% endif %}
{% if firewall.get('ipv6', false) and firewall.get('ipv6_drop', []) | length > 0 %}
{% for ip in firewall.ipv6_drop | sort %}
# Drop forwarding to WAN for IP {{ ip }}
add rule inet filter FORWARD oifname {{ firewall.wan }} ip6 daddr {{ ip }} counter jump FORWARD_LOG_DROP comment "{{ ip }}"
{% endfor %}
{% endif %}

# Accept established and related connections on FORWARD chain
add rule inet filter FORWARD ct state related,established counter name forward_established accept

# =========================================
# Per-Subnet and Per-Device FORWARD Rules
# =========================================
{% for domain, domain_data in subnets.items() | sort %}

### {{ domain }} ###
{% if domain_data.ipv6 and firewall.get('icmpv6_forward_types', []) | length > 0 %}

# Allow ICMPv6 from the WAN to subnet {{ domain }} ({{ domain_data.interface }})
add rule inet filter FORWARD iifname {{ firewall.wan }} oifname {{ domain_data.interface }} meta l4proto icmpv6 icmpv6 type { {{ firewall.icmpv6_forward_types | join(', ') }} } counter accept comment "{{ domain }}"
{% endif %}
{% if domain_data.get('host_access', []) | length > 0 %}
{% for access_host in domain_data.host_access | sort %}

# Allow subnet {{ domain }} ({{ domain_data.interface }}) to access host {{ access_host }}
add rule inet filter FORWARD iifname {{ domain_data.interface }} ip daddr {{ access_host }} counter forward_host_access_{{ domain|replace('.', '_') }}_{{ access_host|replace('.', '_') }} accept comment "{{ domain }}"
{% endfor %}
{% endif %}
{% if domain_data.get('subnet_access', []) | length > 0 %}
{% for access_domain in domain_data.subnet_access | sort %}

# Allow subnet {{ domain }} ({{ domain_data.interface }}) to access subnet {{ access_domain }} ({{ subnets[access_domain].interface }})
add rule inet filter FORWARD iifname {{ domain_data.interface }} oifname {{ subnets[access_domain].interface }} counter accept comment "{{ domain }}:{{ access_domain }}"
{% endfor %}
{% endif %}
{% if devices.get(domain) %}
{% for subdomain, subdomain_data in devices[domain].items() | sort %}
{% for ethernet, ethernet_data in subdomain_data.items() | sort %}
{% if ethernet_data.block_wan != true %}

# Allow device {{ ethernet_data.name }}.{{ subdomain }}.{{ domain }} ({{ domain_data.interface }}) to access WAN ({{ firewall.wan }})
add rule inet filter FORWARD iifname {{ domain_data.interface }} oifname {{ firewall.wan }} ether saddr {{ ethernet }} counter accept comment "{{ ethernet_data.name }}.{{ subdomain }}.{{ domain }}"
{% endif %}
{% if ethernet_data.get('host_access', []) | length > 0 %}
{% for access_host in ethernet_data.host_access | sort %}

# Allow device {{ ethernet_data.name }}.{{ subdomain }}.{{ domain }} ({{ domain_data.interface }}) to access host {{ access_host }}
add rule inet filter FORWARD iifname {{ domain_data.interface }} ether saddr {{ ethernet }} ip daddr {{ access_host }} counter accept comment "{{ ethernet_data.name }}.{{ subdomain }}.{{ domain }}:{{ access_host }}"
{% endfor %}
{% endif %}
{% if ethernet_data.get('subnet_access', []) | length > 0 %}
{% for access_domain in ethernet_data.subnet_access | sort %}

# Allow device {{ ethernet_data.name }}.{{ subdomain }}.{{ domain }} ({{ domain_data.interface }}) to access subnet {{ access_domain }} ({{ subnets[access_domain].interface }})
add rule inet filter FORWARD iifname {{ domain_data.interface }} ether saddr {{ ethernet }} oifname {{ subnets[access_domain].interface }} counter accept comment "{{ ethernet_data.name }}:{{ access_domain }}"
{% endfor %}
{% endif %}
{% endfor %}
{% endfor %}
{% endif %}
{% if domain_data.allow_override_wan %}

# Allow subnet {{ domain }} ({{ domain_data.interface }}) to access WAN (OVERRIDE) ({{ firewall.wan }})
add counter inet filter forward_domain_override_{{ domain|replace('.', '_') }}
add rule inet filter FORWARD iifname {{ domain_data.interface }} oifname {{ firewall.wan }} counter name forward_domain_override_{{ domain|replace('.', '_') }} accept comment "{{ domain }}"
{% endif %}
{% endfor %}

# =========================================
# FORWARD Policy Chain Jump
# =========================================

# Send packets to FORWARD_LOG_DROP
add rule inet filter FORWARD counter name forward_policy_jump_log_drop jump FORWARD_LOG_DROP
